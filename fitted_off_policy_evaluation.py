"""
Created on December 12, 2018

@author: clvoloshin, 
"""

from fitted_algo import FittedAlgo
from model import Model
import numpy as np

class FittedOffPolicyQEvaluation(FittedAlgo):
	def __init__(self, initial_states, num_inputs, dim_of_actions, max_epochs, gamma):
		'''
		An implementation of fitted Q iteration

		num_inputs: number of inputs
		dim_of_actions: dimension of action space
		max_epochs: positive int, specifies how many iterations to run the algorithm
		gamma: discount factor
		'''
		self.initial_states = initial_states
		super(FittedOffPolicyQEvaluation, self).__init__(num_inputs, dim_of_actions, max_epochs, gamma)

	def run(self, dataset, policy):
		# dataset is the original dataset generated by pi_{old} to which we will find
		# an approximately optimal Q

		self.Q_k = self.init_Q()
		for k in range(self.max_epochs):
			D_k = [[np.hstack([x,np.eye(1, self.dim_of_actions, a)]).reshape(-1), r + self.gamma*self.Q_k(x_prime, policy(x_prime))[0]] for x,a,x_prime,r in dataset]
			self.fit(np.array([x[0] for x in D_k]), np.array([x[1] for x in D_k]))

		return np.mean([self.Q_k(state, policy(state)) for state in self.initial_states])


