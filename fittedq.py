"""
Created on December 12, 2018

@author: clvoloshin, 
"""

from fitted_algo import FittedAlgo
from model import Model
import numpy as np

class FittedQIteration(FittedAlgo):
	def __init__(self, num_inputs, dim_of_actions, max_epochs, gamma):
		'''
		An implementation of fitted Q iteration

		num_inputs: number of inputs
		dim_of_actions: dimension of action space
		max_epochs: positive int, specifies how many iterations to run the algorithm
		gamma: discount factor
		'''
		super(FittedQIteration, self).__init__(num_inputs, dim_of_actions, max_epochs, gamma)


	def run(self, dataset):
		# dataset is the original dataset generated by pi_{old} to which we will find
		# an approximately optimal Q

		self.Q_k = self.init_Q()
		for k in range(self.max_epochs):
			
			
			# {((x,a), r+gamma*min_a Q(x',a))}
			costs = dataset['cost'] + self.gamma*self.Q_k.min_over_a(dataset['x_prime'])[0]
			X_a = dataset['state_action']

			self.fit(X_a, costs)

		return self.Q_k

