"""
Created on December 12, 2018

@author: clvoloshin, 
"""

from fitted_algo import FittedAlgo
from model import Model
import numpy as np

from print_policy import PrintPolicy

class FittedQIteration(FittedAlgo):
    def __init__(self, num_inputs, dim_of_actions, max_epochs, gamma):
        '''
        An implementation of fitted Q iteration

        num_inputs: number of inputs
        dim_of_actions: dimension of action space
        max_epochs: positive int, specifies how many iterations to run the algorithm
        gamma: discount factor
        '''
        super(FittedQIteration, self).__init__(num_inputs, dim_of_actions, max_epochs, gamma)


    def run(self, dataset):
        # dataset is the original dataset generated by pi_{old} to which we will find
        # an approximately optimal Q

        self.Q_k_minus_1 = self.init_Q()
        for k in range(self.max_epochs):
            
            # {((x,a), c+gamma*min_a Q(x',a))}

            costs = dataset['cost'] + self.gamma*self.Q_k_minus_1.min_over_a(dataset['x_prime'])[0]
            X_a = dataset['state_action']
            
            self.fit(X_a, costs, epochs=10000, batch_size= 1024,epsilon=1e-12, verbose=1)            
            self.Q_k.copy_over_to(self.Q_k_minus_1.model)

            PrintPolicy().pprint(self.Q_k)
        return self.Q_k

    def copy_over(self, from_, to_):
        to_.model = keras.models.clone_model(from_.model)
        to_.model.set_weights(from_.model.get_weights())

