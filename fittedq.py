"""
Created on December 12, 2018

@author: clvoloshin, 
"""

from fitted_algo import FittedAlgo
from model import Model
import numpy as np
from tqdm import tqdm

class FittedQIteration(FittedAlgo):
    def __init__(self, num_inputs, dim_of_actions, max_epochs, gamma):
        '''
        An implementation of fitted Q iteration

        num_inputs: number of inputs
        dim_of_actions: dimension of action space
        max_epochs: positive int, specifies how many iterations to run the algorithm
        gamma: discount factor
        '''
        super(FittedQIteration, self).__init__(num_inputs, dim_of_actions, max_epochs, gamma)


    def run(self, dataset, desc='FQI'):
        # dataset is the original dataset generated by pi_{old} to which we will find
        # an approximately optimal Q

        epochs = 3000
        self.Q_k = self.init_Q()
        
        for k in tqdm(range(self.max_epochs), desc=desc):
            
            # {((x,a), c+gamma*min_a Q(x',a))}
            if k == 0:
                # Q_0 = 0 everywhere
                costs = dataset['cost']
            else:
                costs = dataset['cost'] + self.gamma*self.Q_k.min_over_a(dataset['x_prime'])[0]*(1-dataset['done'].astype(int))
                

            X_a = dataset['state_action']
            self.fit(X_a, costs, epochs=epochs, batch_size= 512,epsilon=1e-10, verbose=0)

        return self.Q_k

    def copy_over(self, from_, to_):
        to_.model = keras.models.clone_model(from_.model)
        to_.model.set_weights(from_.model.get_weights())

